var updateReport;
$(() => {
    // 后台接收数据对象
    const data = {
        hasLogo: true,
        hasHeader: true,
        header: {
            headerAlign: "center",
            hasTitle: true,
            title: "Experiment Name",
            hasSubTitle: true,
            subTitle: "2020/3/13 23:53",
            hasLogo: true,
            imgLogo: "../images/logo.png"
        },
        hasExperiment: true,
        experiment: {
            hasInformation: true,
            information: {
                name: "Experiment Name",
                barcode: "",
                userName: "User Name",
                instrumentName: "",
                blockType: "96-Well 0.1-ml Block"
            },
            hasExperimentSetting: true,
            experimentSetting: {
                experimentType: "MeltCurve",
                chemistry: "TapMan Reagents",
                runMode: "Sample"
            },
            hasParameterSetting: true,
            parameterSetting: {
                reactionVolume: "",
                lidHeatingSwitch: "",
                coverTemp: "",
                lidCloseTemp: "",
            },
            hasComments: true,
            comments: "",
            hasLoadPreview: true,
            imgLoadPreviewPlate: "",
            imgLoadPreviewProtocol: "",
        },
        hasPlate: true,
        plate: {
            hasPlateLayout: true,
            plateLayout: [
                [
                    "",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                [
                    "A",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "",
                    "",
                    ""
                ],
                [
                    "B",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "",
                    "",
                    ""
                ],
                [
                    "C",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\na\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nb\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "sample\nc\nUnk",
                    "",
                    "",
                    ""
                ],
                [
                    "D",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd"
                ],
                [
                    "E",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd"
                ],
                [
                    "F",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\na\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd",
                    "sample\nb\nStd"
                ],
                [
                    "G",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "",
                    "",
                    ""
                ],
                [
                    "H",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "sample\nc\nStd",
                    "",
                    "",
                    ""
                ]
            ],
            hasTask: true,
            task: "Unknow: 27个\nNTX: 0个\nPOS: 0个\nNEG: 0个\nSTD: 54个",
            hasTarget: true,
            target: [
                [
                    "NAME",
                    "CLR",
                    "CH",
                    "QUEN",
                    "RF"
                ],
                [
                    "a",
                    "#00aa00",
                    "FAM",
                    "TAMARA",
                    false
                ],
                [
                    "b",
                    "#0088dd",
                    "FAM",
                    "TAMARA",
                    true
                ],
                [
                    "c",
                    "#dd0000",
                    "FAM",
                    "TAMARA",
                    false
                ]
            ],
            hasSplitPlate: true,
            splitPlate: "",
            hasSample: true,
            sample: [
                [
                    "ID",
                    "NAME",
                    "CTRL",
                    "WELL",
                    "MARK"
                ],
                [
                    "",
                    "sample",
                    true,
                    "A1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "A9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "B9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "C9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D10",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D11",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "D12",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E10",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E11",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "E12",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F10",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F11",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "F12",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "G9",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H1",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H2",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H3",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H4",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H5",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H6",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H7",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H8",
                    ""
                ],
                [
                    "",
                    "sample",
                    true,
                    "H9",
                    ""
                ]
            ],
            hasStandard: true,
            standard: {
                selectTarget: "",
                standardAmount: "",
                standardNumber: "",
                factor: "",
                dilutionFactor: "",
                unit: "",
                replicates: "",
                increasing_decreasing: "",
                assignment: ""
            }
        },
        hasProtocol: true,
        protocol: {
            hasProtocol: true,
            protocol: "1. 95.00℃ Hold 5:00\n2. 95.00℃ Hold 1:00\n3. 60.00℃ Hold 0:30\nRead\n4. Go to step3 for 40 cycles\n5. Melting curve 60.00℃ to 95.00℃,increment 0.5℃, read,\n",
            advancedSetting: ""
        },
        hasRun: true,
        run: {
            hasRunTime: true,
            runTime: "Data: Jan.01.1970\nTime: 08:00:00 to 08:00:00\nPause: 08:00:00\nRestart: 08:00:00\nPause time: 0sec\nTotal time: 0sec",
            hasTemperatureCurve: true,
            imgTemperatureCurve: ""
        },
        hasAnalysis: true,
        analysis: {
            hasQuantification: true,
            imgAmplificationCurve_cq: "",
            imgAmplificationCurve_log: "",
            hasStandardCurve: true,
            imgStandardCurve: "",
            hasQuantificationData: true,
            quantificationData: [
                [
                    "Well",
                    "Target",
                    "Task",
                    "Sample",
                    "Cq",
                    "Cq Mean",
                    "SQ",
                    "F0"
                ],
                [
                    "A1",
                    "Actin",
                    "Unk",
                    "0Hr",
                    "19.64",
                    "19.68",
                    "1.1138E+05",
                    "0.00000326"
                ],
                [
                    "A2",
                    "Actin",
                    "Unk",
                    "1Hr",
                    "19.69",
                    "19.73",
                    "1.0833E+05",
                    "0.00000317"
                ],
                [
                    "A3",
                    "Actin",
                    "Unk",
                    "2Hr",
                    "19.72",
                    "19.74",
                    "1.0603E+05",
                    "0.00000310"
                ],
                [
                    "A4",
                    "Tubulin",
                    "Unk",
                    "0Hr",
                    "14.32",
                    "16.14",
                    "9.7235E+05",
                    "0.00006670"
                ],
                [
                    "A5",
                    "Tubulin",
                    "Unk",
                    "1Hr",
                    "14.32",
                    "14.34",
                    "9.7156E+05",
                    "0.00006664"
                ],
                [
                    "A6",
                    "Tubulin",
                    "Unk",
                    "2Hr",
                    "14.28",
                    "14.32",
                    "9.9692E+05",
                    "0.00006838"
                ],
                [
                    "A7",
                    "IL1Beta",
                    "Unk",
                    "0Hr",
                    "9.42",
                    "9.41",
                    "9.4630E+06",
                    "0.00179378"
                ],
                [
                    "A8",
                    "IL1Beta",
                    "Unk",
                    "1Hr",
                    "11.61",
                    "11.60",
                    "2.1737E+06",
                    "0.00041203"
                ],
                [
                    "A9",
                    "IL1Beta",
                    "Unk",
                    "2Hr",
                    "13.72",
                    "13.75",
                    "5.2446E+05",
                    "0.00009942"
                ],
                [
                    "B1",
                    "Actin",
                    "Unk",
                    "0Hr",
                    "19.69",
                    "19.68",
                    "1.0825E+05",
                    "0.00000317"
                ],
                [
                    "B2",
                    "Actin",
                    "Unk",
                    "1Hr",
                    "19.73",
                    "19.73",
                    "1.0554E+05",
                    "0.00000309"
                ],
                [
                    "B3",
                    "Actin",
                    "Unk",
                    "2Hr",
                    "19.70",
                    "19.74",
                    "1.0723E+05",
                    "0.00000314"
                ],
                [
                    "B4",
                    "Tubulin",
                    "Unk",
                    "0Hr",
                    "14.33",
                    "16.14",
                    "9.5999E+05",
                    "0.00006585"
                ],
                [
                    "B5",
                    "Tubulin",
                    "Unk",
                    "1Hr",
                    "14.35",
                    "14.34",
                    "9.5304E+05",
                    "0.00006537"
                ],
                [
                    "B6",
                    "Tubulin",
                    "Unk",
                    "2Hr",
                    "14.33",
                    "14.32",
                    "9.6337E+05",
                    "0.00006608"
                ],
                [
                    "B7",
                    "IL1Beta",
                    "Unk",
                    "0Hr",
                    "9.41",
                    "9.41",
                    "9.5008E+06",
                    "0.00180094"
                ],
                [
                    "B8",
                    "IL1Beta",
                    "Unk",
                    "1Hr",
                    "11.57",
                    "11.60",
                    "2.2204E+06",
                    "0.00042088"
                ],
                [
                    "B9",
                    "IL1Beta",
                    "Unk",
                    "2Hr",
                    "13.78",
                    "13.75",
                    "5.0607E+05",
                    "0.00009593"
                ],
                [
                    "C1",
                    "Actin",
                    "Unk",
                    "0Hr",
                    "19.72",
                    "19.68",
                    "1.0596E+05",
                    "0.00000310"
                ],
                [
                    "C2",
                    "Actin",
                    "Unk",
                    "1Hr",
                    "19.77",
                    "19.73",
                    "1.0272E+05",
                    "0.00000301"
                ],
                [
                    "C3",
                    "Actin",
                    "Unk",
                    "2Hr",
                    "19.79",
                    "19.74",
                    "1.0112E+05",
                    "0.00000296"
                ],
                [
                    "C4",
                    "Tubulin",
                    "Unk",
                    "0Hr",
                    "19.76",
                    "16.14",
                    "2.5162E+04",
                    "0.00000173"
                ],
                [
                    "C5",
                    "Tubulin",
                    "Unk",
                    "1Hr",
                    "14.35",
                    "14.34",
                    "9.5291E+05",
                    "0.00006536"
                ],
                [
                    "C6",
                    "Tubulin",
                    "Unk",
                    "2Hr",
                    "14.36",
                    "14.32",
                    "9.4369E+05",
                    "0.00006473"
                ],
                [
                    "C7",
                    "IL1Beta",
                    "Unk",
                    "0Hr",
                    "9.41",
                    "9.41",
                    "9.5119E+06",
                    "0.00180305"
                ],
                [
                    "C8",
                    "IL1Beta",
                    "Unk",
                    "1Hr",
                    "11.61",
                    "11.60",
                    "2.1620E+06",
                    "0.00040982"
                ],
                [
                    "C9",
                    "IL1Beta",
                    "Unk",
                    "2Hr",
                    "13.75",
                    "13.75",
                    "5.1655E+05",
                    "0.00009792"
                ],
                [
                    "D1",
                    "Actin",
                    "Std",
                    "dil-1",
                    "30.07",
                    "30.20",
                    "1.0000E+02",
                    "0.00000000"
                ],
                [
                    "D2",
                    "Actin",
                    "Std",
                    "dil-2",
                    "27.50",
                    "27.45",
                    "1.0000E+03",
                    "0.00000002"
                ],
                [
                    "D3",
                    "Actin",
                    "Std",
                    "dil-3",
                    "23.29",
                    "23.34",
                    "1.0000E+04",
                    "0.00000031"
                ],
                [
                    "D4",
                    "Actin",
                    "Std",
                    "dil-4",
                    "19.77",
                    "19.75",
                    "1.0000E+05",
                    "0.00000300"
                ],
                [
                    "D5",
                    "Actin",
                    "Std",
                    "dil-5",
                    "16.30",
                    "16.28",
                    "1.0000E+06",
                    "0.00002801"
                ],
                [
                    "D6",
                    "Actin",
                    "Std",
                    "dil-6",
                    "12.56",
                    "12.56",
                    "1.0000E+07",
                    "0.00031043"
                ],
                [
                    "D7",
                    "Tubulin",
                    "Std",
                    "dil-7",
                    "27.83",
                    "27.92",
                    "1.0000E+02",
                    "0.00000001"
                ],
                [
                    "D8",
                    "Tubulin",
                    "Std",
                    "dil-8",
                    "24.56",
                    "24.55",
                    "1.0000E+03",
                    "0.00000007"
                ],
                [
                    "D9",
                    "Tubulin",
                    "Std",
                    "dil-9",
                    "21.24",
                    "21.26",
                    "1.0000E+04",
                    "0.00000064"
                ],
                [
                    "D10",
                    "Tubulin",
                    "Std",
                    "dil-10",
                    "17.63",
                    "17.65",
                    "1.0000E+05",
                    "0.00000720"
                ],
                [
                    "D11",
                    "Tubulin",
                    "Std",
                    "dil-11",
                    "14.38",
                    "14.39",
                    "1.0000E+06",
                    "0.00006400"
                ],
                [
                    "D12",
                    "Tubulin",
                    "Std",
                    "dil-12",
                    "10.73",
                    "10.73",
                    "1.0000E+07",
                    "0.00074318"
                ],
                [
                    "E1",
                    "Actin",
                    "Std",
                    "dil-1",
                    "30.33",
                    "30.20",
                    "1.0000E+02",
                    "0.00000000"
                ],
                [
                    "E2",
                    "Actin",
                    "Std",
                    "dil-2",
                    "27.36",
                    "27.45",
                    "1.0000E+03",
                    "0.00000002"
                ],
                [
                    "E3",
                    "Actin",
                    "Std",
                    "dil-3",
                    "23.36",
                    "23.34",
                    "1.0000E+04",
                    "0.00000030"
                ],
                [
                    "E4",
                    "Actin",
                    "Std",
                    "dil-4",
                    "19.75",
                    "19.75",
                    "1.0000E+05",
                    "0.00000303"
                ],
                [
                    "E5",
                    "Actin",
                    "Std",
                    "dil-5",
                    "16.28",
                    "16.28",
                    "1.0000E+06",
                    "0.00002834"
                ],
                [
                    "E6",
                    "Actin",
                    "Std",
                    "dil-6",
                    "12.56",
                    "12.56",
                    "1.0000E+07",
                    "0.00031007"
                ],
                [
                    "E7",
                    "Tubulin",
                    "Std",
                    "dil-7",
                    "27.76",
                    "27.92",
                    "1.0000E+02",
                    "0.00000001"
                ],
                [
                    "E8",
                    "Tubulin",
                    "Std",
                    "dil-8",
                    "24.55",
                    "24.55",
                    "1.0000E+03",
                    "0.00000007"
                ],
                [
                    "E9",
                    "Tubulin",
                    "Std",
                    "dil-9",
                    "21.23",
                    "21.26",
                    "1.0000E+04",
                    "0.00000064"
                ],
                [
                    "E10",
                    "Tubulin",
                    "Std",
                    "dil-10",
                    "17.65",
                    "17.65",
                    "1.0000E+05",
                    "0.00000712"
                ],
                [
                    "E11",
                    "Tubulin",
                    "Std",
                    "dil-11",
                    "14.40",
                    "14.39",
                    "1.0000E+06",
                    "0.00006322"
                ],
                [
                    "E12",
                    "Tubulin",
                    "Std",
                    "dil-12",
                    "10.73",
                    "10.73",
                    "1.0000E+07",
                    "0.00074068"
                ],
                [
                    "F1",
                    "Actin",
                    "Std",
                    "dil-1",
                    "30.21",
                    "30.20",
                    "1.0000E+02",
                    "0.00000000"
                ],
                [
                    "F2",
                    "Actin",
                    "Std",
                    "dil-2",
                    "27.50",
                    "27.45",
                    "1.0000E+03",
                    "0.00000002"
                ],
                [
                    "F3",
                    "Actin",
                    "Std",
                    "dil-3",
                    "23.36",
                    "23.34",
                    "1.0000E+04",
                    "0.00000030"
                ],
                [
                    "F4",
                    "Actin",
                    "Std",
                    "dil-4",
                    "19.74",
                    "19.75",
                    "1.0000E+05",
                    "0.00000306"
                ],
                [
                    "F5",
                    "Actin",
                    "Std",
                    "dil-5",
                    "16.27",
                    "16.28",
                    "1.0000E+06",
                    "0.00002843"
                ],
                [
                    "F6",
                    "Actin",
                    "Std",
                    "dil-6",
                    "12.57",
                    "12.56",
                    "1.0000E+07",
                    "0.00030771"
                ],
                [
                    "F7",
                    "Tubulin",
                    "Std",
                    "dil-7",
                    "28.16",
                    "27.92",
                    "1.0000E+02",
                    "0.00000001"
                ],
                [
                    "F8",
                    "Tubulin",
                    "Std",
                    "dil-8",
                    "24.54",
                    "24.55",
                    "1.0000E+03",
                    "0.00000007"
                ],
                [
                    "F9",
                    "Tubulin",
                    "Std",
                    "dil-9",
                    "21.31",
                    "21.26",
                    "1.0000E+04",
                    "0.00000061"
                ],
                [
                    "F10",
                    "Tubulin",
                    "Std",
                    "dil-10",
                    "17.68",
                    "17.65",
                    "1.0000E+05",
                    "0.00000695"
                ],
                [
                    "F11",
                    "Tubulin",
                    "Std",
                    "dil-11",
                    "14.40",
                    "14.39",
                    "1.0000E+06",
                    "0.00006303"
                ],
                [
                    "F12",
                    "Tubulin",
                    "Std",
                    "dil-12",
                    "10.74",
                    "10.73",
                    "1.0000E+07",
                    "0.00073706"
                ],
                [
                    "G1",
                    "IL1Beta",
                    "Std",
                    "dil-13",
                    "26.42",
                    "26.41",
                    "1.0000E+02",
                    "0.00000002"
                ],
                [
                    "G2",
                    "IL1Beta",
                    "Std",
                    "dil-13",
                    "26.33",
                    "26.41",
                    "1.0000E+02",
                    "0.00000002"
                ],
                [
                    "G3",
                    "IL1Beta",
                    "Std",
                    "dil-14",
                    "23.13",
                    "23.16",
                    "1.0000E+03",
                    "0.00000018"
                ],
                [
                    "G4",
                    "IL1Beta",
                    "Std",
                    "dil-15",
                    "19.60",
                    "19.59",
                    "1.0000E+04",
                    "0.00000192"
                ],
                [
                    "G5",
                    "IL1Beta",
                    "Std",
                    "dil-15",
                    "19.62",
                    "19.59",
                    "1.0000E+04",
                    "0.00000190"
                ],
                [
                    "G6",
                    "IL1Beta",
                    "Std",
                    "dil-16",
                    "16.30",
                    "16.25",
                    "1.0000E+05",
                    "0.00001766"
                ],
                [
                    "G7",
                    "IL1Beta",
                    "Std",
                    "dil-17",
                    "12.58",
                    "12.59",
                    "1.0000E+06",
                    "0.00021402"
                ],
                [
                    "G8",
                    "IL1Beta",
                    "Std",
                    "dil-17",
                    "12.60",
                    "12.59",
                    "1.0000E+06",
                    "0.00021128"
                ],
                [
                    "G9",
                    "IL1Beta",
                    "Std",
                    "dil-18",
                    "9.43",
                    "9.43",
                    "1.0000E+07",
                    "0.00177854"
                ],
                [
                    "H1",
                    "IL1Beta",
                    "Std",
                    "dil-13",
                    "26.49",
                    "26.41",
                    "1.0000E+02",
                    "0.00000002"
                ],
                [
                    "H2",
                    "IL1Beta",
                    "Std",
                    "dil-14",
                    "23.15",
                    "23.16",
                    "1.0000E+03",
                    "0.00000018"
                ],
                [
                    "H3",
                    "IL1Beta",
                    "Std",
                    "dil-14",
                    "23.21",
                    "23.16",
                    "1.0000E+03",
                    "0.00000017"
                ],
                [
                    "H4",
                    "IL1Beta",
                    "Std",
                    "dil-15",
                    "19.56",
                    "19.59",
                    "1.0000E+04",
                    "0.00000198"
                ],
                [
                    "H5",
                    "IL1Beta",
                    "Std",
                    "dil-16",
                    "16.22",
                    "16.25",
                    "1.0000E+05",
                    "0.00001861"
                ],
                [
                    "H6",
                    "IL1Beta",
                    "Std",
                    "dil-16",
                    "16.23",
                    "16.25",
                    "1.0000E+05",
                    "0.00001849"
                ],
                [
                    "H7",
                    "IL1Beta",
                    "Std",
                    "dil-17",
                    "12.59",
                    "12.59",
                    "1.0000E+06",
                    "0.00021258"
                ],
                [
                    "H8",
                    "IL1Beta",
                    "Std",
                    "dil-18",
                    "9.44",
                    "9.43",
                    "1.0000E+07",
                    "0.00177058"
                ],
                [
                    "H9",
                    "IL1Beta",
                    "Std",
                    "dil-18",
                    "9.41",
                    "9.43",
                    "1.0000E+07",
                    "0.00179994"
                ]
            ],
            hasMelt: true,
            imgMeltCurve: "",
            imgMeltPeak: "",
            hasMeltData: true,
            meltData: [
                [
                    "Well",
                    "Target",
                    "Task",
                    "Sample",
                    "Melt Temp"
                ],
                [
                    "A1",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "A2",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "A3",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "A4",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "A5",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "A6",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "A7",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "A8",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "A9",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "B1",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "B2",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "B3",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "B4",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "B5",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "B6",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "B7",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "B8",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "B9",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "C1",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "C2",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "C3",
                    "a",
                    "Unk",
                    "ss",
                    "83.00"
                ],
                [
                    "C4",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "C5",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "C6",
                    "b",
                    "Unk",
                    "ss",
                    "83.50"
                ],
                [
                    "C7",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "C8",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "C9",
                    "c",
                    "Unk",
                    "ss",
                    "82.50"
                ],
                [
                    "D1",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D2",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D3",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D4",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D5",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D6",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "D7",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "D8",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "D9",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "D10",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "D11",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "D12",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E1",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E2",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E3",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E4",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E5",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E6",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "E7",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E8",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E9",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E10",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E11",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "E12",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F1",
                    "a",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "F2",
                    "a",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "F3",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "F4",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "F5",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "F6",
                    "a",
                    "Std",
                    "ss",
                    "83.00"
                ],
                [
                    "F7",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F8",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F9",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F10",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F11",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "F12",
                    "b",
                    "Std",
                    "ss",
                    "83.50"
                ],
                [
                    "G1",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G2",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G3",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G4",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G5",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G6",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G7",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G8",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "G9",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H1",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H2",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H3",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H4",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H5",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H6",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H7",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H8",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ],
                [
                    "H9",
                    "c",
                    "Std",
                    "ss",
                    "82.50"
                ]
            ],
            hasGeneExpression: true,
            imgGeneExpressionBar: "",
            geneExpressionMode: "",
            geneExpressionData:  [
                [
                    "Target",
                    "Sample",
                    "Ctrl",
                    "Expression",
                    "Expression SD",
                    "Corrected Expression SD",
                    "Expression SEM",
                    "Corrected Expression SEM",
                    "Mean Cq",
                    "Cq SD",
                    "Cq SEM"
                ],
                [
                    "Actin",
                    "0Hr",
                    "*",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "19.68",
                    "0.040415",
                    "0.023333"
                ],
                [
                    "Actin",
                    "1Hr",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "19.73",
                    "0.040000",
                    "0.023094"
                ],
                [
                    "Actin",
                    "2Hr",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "19.74",
                    "0.047258",
                    "0.027285"
                ],
                [
                    "Actin",
                    "dil-1",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "30.20",
                    "0.130128",
                    "0.075130"
                ],
                [
                    "Actin",
                    "dil-2",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "27.45",
                    "0.080829",
                    "0.046667"
                ],
                [
                    "Actin",
                    "dil-3",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "23.34",
                    "0.040415",
                    "0.023333"
                ],
                [
                    "Actin",
                    "dil-4",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "19.75",
                    "0.015275",
                    "0.008819"
                ],
                [
                    "Actin",
                    "dil-5",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "16.28",
                    "0.015275",
                    "0.008819"
                ],
                [
                    "Actin",
                    "dil-6",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "12.56",
                    "0.005774",
                    "0.003333"
                ],
                [
                    "Tubulin",
                    "0Hr",
                    "*",
                    "1.000000",
                    "0.031520",
                    "N/A",
                    "0.018198",
                    "N/A",
                    "16.14",
                    "3.137903",
                    "1.811669"
                ],
                [
                    "Tubulin",
                    "1Hr",
                    "",
                    "1.017721",
                    "0.000228",
                    "N/A",
                    "0.000131",
                    "N/A",
                    "14.34",
                    "0.017321",
                    "0.010000"
                ],
                [
                    "Tubulin",
                    "2Hr",
                    "",
                    "1.017947",
                    "0.000448",
                    "N/A",
                    "0.000259",
                    "N/A",
                    "14.32",
                    "0.040415",
                    "0.023333"
                ],
                [
                    "Tubulin",
                    "dil-7",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "27.92",
                    "0.213620",
                    "0.123333"
                ],
                [
                    "Tubulin",
                    "dil-8",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "24.55",
                    "0.010000",
                    "0.005774"
                ],
                [
                    "Tubulin",
                    "dil-9",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "21.26",
                    "0.043589",
                    "0.025166"
                ],
                [
                    "Tubulin",
                    "dil-10",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "17.65",
                    "0.025166",
                    "0.014530"
                ],
                [
                    "Tubulin",
                    "dil-11",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "14.39",
                    "0.011547",
                    "0.006667"
                ],
                [
                    "Tubulin",
                    "dil-12",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "10.73",
                    "0.005774",
                    "0.003333"
                ],
                [
                    "IL1Beta",
                    "0Hr",
                    "*",
                    "1.000000",
                    "0.009968",
                    "N/A",
                    "0.005755",
                    "N/A",
                    "9.41",
                    "0.005774",
                    "0.003333"
                ],
                [
                    "IL1Beta",
                    "1Hr",
                    "",
                    "0.979848",
                    "0.000261",
                    "N/A",
                    "0.000151",
                    "N/A",
                    "11.60",
                    "0.023094",
                    "0.013333"
                ],
                [
                    "IL1Beta",
                    "2Hr",
                    "",
                    "0.960011",
                    "0.000343",
                    "N/A",
                    "0.000198",
                    "N/A",
                    "13.75",
                    "0.030000",
                    "0.017321"
                ],
                [
                    "IL1Beta",
                    "dil-13",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "26.41",
                    "0.080208",
                    "0.046308"
                ],
                [
                    "IL1Beta",
                    "dil-14",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "23.16",
                    "0.041633",
                    "0.024037"
                ],
                [
                    "IL1Beta",
                    "dil-15",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "19.59",
                    "0.030551",
                    "0.017638"
                ],
                [
                    "IL1Beta",
                    "dil-16",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "16.25",
                    "0.043589",
                    "0.025166"
                ],
                [
                    "IL1Beta",
                    "dil-17",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "12.59",
                    "0.010000",
                    "0.005774"
                ],
                [
                    "IL1Beta",
                    "dil-18",
                    "",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "N/A",
                    "9.43",
                    "0.015275",
                    "0.008819"
                ]
            ]
        },
        "type": "docx"
    };

    // 更新后台接收数据对象的方法
    function update(toObject = data, fromObject) {
        if (Array.isArray(toObject)) {
            toObject.length = 0;
            fromObject.forEach(item => toObject[toObject.length] = item);
        } else {
            for (let item in fromObject) {
                if (fromObject.hasOwnProperty(item) && toObject.hasOwnProperty(item)) {
                    if (typeof toObject[item] === "object") {
                        update(toObject[item], fromObject[item]);
                    } else {
                        toObject[item] = fromObject[item];
                    }
                }
            }
        }
    }

    // 更新时间
    function updateDate() {
        let now = new Date(),
            value = now.getFullYear() + '/' + (now.getMonth() + 1) + '/' + now.getDate() + ' ' + now.getHours() + ':' + now.getMinutes();
        let myDate = document.getElementById("txtHeaderMenuDetailSubTitle");
        myDate.value = value;
        update(data, {header: {subTitle: value}});
    }

    // 本页面的更新主方法
    updateReport = (obj = {}) => {
        update(data, obj);
        updateDate();
        show();
    };


    // 下载
    let $alertDownload = $("#alertDownload");
    $("#save").on("click", () => $alertDownload.fadeIn("fast"));
    $("#alertDownload_OK").on("click", () => {
        $alertDownload.fadeOut("fast");
        alert("It is generating file that can be export, please wait for a few seconds.");
        $.ajax({
            type: "POST",
            url: top.cqMAN.pageContextPath + "/reportAction/generate",
            contentType: 'application/json;charset=utf-8',
            data: JSON.stringify(data),
            success() {
                window.location.href = top.cqMAN.pageContextPath + "/reportAction/generateUrl";
                alertFadeOut();
            },
            error() {
                alert("A fatal unknown error has occurred.");
                alertFadeOut();
            }
        });
    });
    $("#chkWord").on("click", () => update(data, {type: "docx"}));
    $("#chkPdf").on("click", () => update(data, {type: "pdf"}));

    // 文件树开关
    $("#list").on("click", "div", function () {
        let $this = $(this);
        $this.next().css("padding-left", "21px").slideToggle("fast", function () {
            $(this).css("padding-left", "");
        });
        // 图标变换
        if ($this.hasClass('picExpand')) {
            $this.removeClass().addClass('picCollapse');
        } else {
            $this.removeClass().addClass('picExpand');
        }
    });

    // 按钮缩放
    let $container = $("#container");
    $("#zoomOut").on("click", scale => (scale = $container.data("scale")) > 0 ? $container.removeClass(`scale${scale--}`).addClass(`scale${scale}`).data("scale", scale) : undefined);
    $("#zoomIn").on("click", scale => (scale = $container.data("scale")) < 10 ? $container.removeClass(`scale${scale++}`).addClass(`scale${scale}`).data("scale", scale) : undefined);
    // 滚轮缩放
    let keyCtrlDowning = false;
    $container.on("mousewheel DOMMouseScroll", function (e, delta) {
        delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1));
        if (keyCtrlDowning) {
            e.preventDefault();
            let scale = $container.data("scale");
            if (delta > 0 && scale < 10) {
                $container.removeClass(`scale${scale++}`).addClass(`scale${scale}`).data("scale", scale);
            } else if (delta < 0 && scale > 0) {
                $container.removeClass(`scale${scale--}`).addClass(`scale${scale}`).data("scale", scale);
            }
        }
    });
    document.addEventListener("keydown", e => (e.key === "Control") && (keyCtrlDowning = true));
    document.addEventListener("keyup", () => keyCtrlDowning = false);


    // Logo
    let domChkLogo = document.getElementById("chk_logo");
    domChkLogo.addEventListener("change", function () {
        updateReport({hasLogo: this.checked});
    });
    // Header
    let domChkHeader = document.getElementById("chk_header"),
        domChkTitle = document.getElementById("chk_title"),
        domChkSubTitle = document.getElementById("chk_subTitle"),
        domChkCustomLogo = document.getElementById("chk_customLogo");
    domChkHeader.addEventListener("change", function () {
        let flag = this.checked;
        domChkTitle.checked = flag;
        domChkSubTitle.checked = flag;
        domChkCustomLogo.checked = flag;
        updateReport({hasHeader: flag, header: {hasTitle: flag, hasSubTitle: flag, hasLogo: flag}});
    });
    domChkTitle.addEventListener("change", function () {
        domChkHeader.checked = (this.checked || domChkSubTitle.checked || domChkCustomLogo.checked);
        updateReport({header: {hasTitle: this.checked}});
    });
    domChkSubTitle.addEventListener("change", function () {
        domChkHeader.checked = (domChkTitle.checked || this.checked || domChkCustomLogo.checked);
        updateReport({header: {hasSubTitle: this.checked}});
    });
    domChkCustomLogo.addEventListener("change", function () {
        domChkHeader.checked = (domChkTitle.checked || domChkSubTitle.checked || this.checked);
        updateReport({header: {hasLogo: this.checked}});
    });
    // Experiment
    let domChkExperiment = document.getElementById("chk_experiment"),
        domChkInformation = document.getElementById("chk_information"),
        domChkExperimentSetting = document.getElementById("chk_experimentSetting"),
        domChkParameterSetting = document.getElementById("chk_parameterSetting"),
        domChkComments = document.getElementById("chk_comments"),
        domChkLoadPreview = document.getElementById("chk_loadPreview");
    domChkExperiment.addEventListener("change", function () {
        let flag = this.checked;
        domChkInformation.checked = flag;
        domChkExperimentSetting.checked = flag;
        domChkParameterSetting.checked = flag;
        domChkComments.checked = flag;
        domChkLoadPreview.checked = flag;
        updateReport({
            hasExperiment: flag,
            experiment: {
                hasInformation: flag,
                hasExperimentSetting: flag,
                hasParameterSetting: flag,
                hasComments: flag,
                hasLoadPreview: flag
            }
        });
    });
    domChkInformation.addEventListener("change", function () {
        domChkExperiment.checked = (this.checked || domChkExperimentSetting.checked || domChkParameterSetting.checked || domChkComments.checked || domChkLoadPreview.checked);
        updateReport({experiment: {hasInformation: this.checked}});
    });
    domChkExperimentSetting.addEventListener("change", function () {
        domChkExperiment.checked = (domChkInformation.checked || this.checked || domChkParameterSetting.checked || domChkComments.checked || domChkLoadPreview.checked);
        updateReport({experiment: {hasExperimentSetting: this.checked}});
    });
    domChkParameterSetting.addEventListener("change", function () {
        domChkExperiment.checked = (domChkInformation.checked || domChkExperimentSetting.checked || this.checked || domChkComments.checked || domChkLoadPreview.checked);
        updateReport({experiment: {hasParameterSetting: this.checked}});
    });
    domChkComments.addEventListener("change", function () {
        domChkExperiment.checked = (domChkInformation.checked || domChkExperimentSetting.checked || domChkParameterSetting.checked || this.checked || domChkLoadPreview.checked);
        updateReport({experiment: {hasComments: this.checked}});
    });
    domChkLoadPreview.addEventListener("change", function () {
        domChkExperiment.checked = (domChkInformation.checked || domChkExperimentSetting.checked || domChkParameterSetting.checked || domChkComments.checked || this.checked);
        updateReport({experiment: {hasLoadPreview: this.checked}});
    });
    // Plate Edit
    let domChkPlateEdit = document.getElementById("chk_plateEdit"),
        domChkPlateLayout = document.getElementById("chk_plateLayout"),
        domChkTask = document.getElementById("chk_task"),
        domChkTarget = document.getElementById("chk_target"),
        domChkSplitPlate = document.getElementById("chk_splitPlate"),
        domChkSample = document.getElementById("chk_sample"),
        domChkStandard = document.getElementById("chk_standard");
    domChkPlateEdit.addEventListener("change", function () {
        let flag = this.checked;
        domChkPlateLayout.checked = flag;
        domChkTask.checked = flag;
        domChkTarget.checked = flag;
        domChkSplitPlate.checked = flag;
        domChkSample.checked = flag;
        domChkStandard.checked = flag;
        updateReport({
            hasPlate: flag,
            plate: {
                hasPlateLayout: flag,
                hasTask: flag,
                hasTarget: flag,
                hasSplitPlate: flag,
                hasSample: flag,
                hasStandard: flag
            }
        });
    });
    domChkPlateLayout.addEventListener("change", function () {
        domChkPlateEdit.checked = (this.checked || domChkTask.checked || domChkTarget.checked || domChkSplitPlate.checked || domChkSample.checked || domChkStandard.checked);
        updateReport({plate: {hasPlateLayout: this.checked}});
    });
    domChkTask.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkPlateLayout.checked || this.checked || domChkTarget.checked || domChkSplitPlate.checked || domChkSample.checked || domChkStandard.checked);
        updateReport({plate: {hasTask: this.checked}});
    });
    domChkTarget.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkPlateLayout.checked || domChkTask.checked || this.checked || domChkSplitPlate.checked || domChkSample.checked || domChkStandard.checked);
        updateReport({plate: {hasTarget: this.checked}});
    });
    domChkSplitPlate.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkPlateLayout.checked || domChkTask.checked || domChkTarget.checked || this.checked || domChkSample.checked || domChkStandard.checked);
        updateReport({plate: {hasSplitPlate: this.checked}});
    });
    domChkSample.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkPlateLayout.checked || domChkTask.checked || domChkTarget.checked || domChkSplitPlate.checked || this.checked || domChkStandard.checked);
        updateReport({plate: {hasSample: this.checked}});
    });
    domChkStandard.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkPlateLayout.checked || domChkTask.checked || domChkTarget.checked || domChkSplitPlate.checked || domChkSample.checked || this.checked);
        updateReport({plate: {hasStandard: this.checked}});
    });
    // Protocol Edit
    let domChkProtocolEdit = document.getElementById("chk_protocolEdit"),
        domChkProtocol = document.getElementById("chk_protocol");
    domChkProtocolEdit.addEventListener("change", function () {
        let flag = this.checked;
        domChkProtocol.checked = flag;
        updateReport({hasProtocol: flag, protocol: {hasProtocol: flag}});
    });
    domChkProtocol.addEventListener("change", function () {
        domChkPlateEdit.checked = this.checked;
        updateReport({protocol: {hasProtocol: this.checked}});
    });
    // Run
    let domChkRun = document.getElementById("chk_run"),
        domChkRunTime = document.getElementById("chk_runTime"),
        domChkTemperatureCurve = document.getElementById("chk_temperatureCurve");
    domChkRun.addEventListener("change", function () {
        let flag = this.checked;
        domChkRunTime.checked = flag;
        domChkTemperatureCurve.checked = flag;
        updateReport({hasRun: flag, run: {hasRunTime: flag, hasTemperatureCurve: flag}});
    });
    domChkRunTime.addEventListener("change", function () {
        domChkPlateEdit.checked = (this.checked || domChkTemperatureCurve.checked);
        updateReport({run: {hasRunTime: this.checked}});
    });
    domChkTemperatureCurve.addEventListener("change", function () {
        domChkPlateEdit.checked = (domChkRunTime.checked || this.checked);
        updateReport({run: {hasTemperatureCurve: this.checked}});
    });
    // Analysis
    let domChkAnalysis = document.getElementById("chk_analysis"),
        domChkQuantification = document.getElementById("chk_quantification"),
        domChkStandardCurve = document.getElementById("chk_standardCurve"),
        domChkQuantificationData = document.getElementById("chk_quantificationData"),
        domChkMeltCurve = document.getElementById("chk_meltCurve"),
        domChkMeltData = document.getElementById("chk_meltData"),
        domChkGeneExpression = document.getElementById("chk_geneExpression");
    domChkAnalysis.addEventListener("change", function () {
        let flag = this.checked;
        domChkQuantification.checked = flag;
        domChkStandardCurve.checked = flag;
        domChkQuantificationData.checked = flag;
        domChkMeltCurve.checked = flag;
        domChkMeltData.checked = flag;
        domChkGeneExpression.checked = flag;
        updateReport({
            hasAnalysis: flag,
            analysis: {
                hasQuantification: flag,
                hasStandardCurve: flag,
                hasQuantificationData: flag,
                hasMelt: flag,
                hasMeltData: flag,
                hasGeneExpression: flag
            }
        });
    });
    domChkQuantification.addEventListener("change", function () {
        domChkAnalysis.checked = (this.checked || domChkStandardCurve.checked || domChkQuantificationData.checked || domChkMeltCurve.checked || domChkMeltData.checked || domChkGeneExpression.checked);
        updateReport({analysis: {hasQuantification: this.checked}});
    });
    domChkStandardCurve.addEventListener("change", function () {
        domChkAnalysis.checked = (domChkQuantification.checked || this.checked || domChkQuantificationData.checked || domChkMeltCurve.checked || domChkMeltData.checked || domChkGeneExpression.checked);
        updateReport({analysis: {hasStandardCurve: this.checked}});
    });
    domChkQuantificationData.addEventListener("change", function () {
        domChkAnalysis.checked = (domChkQuantification.checked || domChkStandardCurve.checked || this.checked || domChkMeltCurve.checked || domChkMeltData.checked || domChkGeneExpression.checked);
        updateReport({analysis: {hasQuantificationData: this.checked}});
    });
    domChkMeltCurve.addEventListener("change", function () {
        domChkAnalysis.checked = (domChkQuantification.checked || domChkStandardCurve.checked || domChkQuantificationData.checked || this.checked || domChkMeltData.checked || domChkGeneExpression.checked);
        updateReport({analysis: {hasMelt: this.checked}});
    });
    domChkMeltData.addEventListener("change", function () {
        domChkAnalysis.checked = (domChkQuantification.checked || domChkStandardCurve.checked || domChkQuantificationData.checked || domChkMeltCurve.checked || this.checked || domChkGeneExpression.checked);
        updateReport({analysis: {hasMeltData: this.checked}});
    });
    domChkGeneExpression.addEventListener("change", function () {
        domChkAnalysis.checked = (domChkQuantification.checked || domChkStandardCurve.checked || domChkQuantificationData.checked || domChkMeltCurve.checked || domChkMeltData.checked || this.checked);
        updateReport({analysis: {hasGeneExpression: this.checked}});
    });

    document.getElementById("txtHeaderMenuDetailTitle").addEventListener("change", function () {
        updateReport({header: {title: this.value}});
    });
    document.getElementById("txtHeaderMenuDetailSubTitle").addEventListener("change", function () {
        updateReport({header: {subTitle: this.value}});
    });
    document.getElementById("selectHeaderMenuDetailAlign").addEventListener("change", function () {
        updateReport({header: {headerAlign: this.value}});
    });

    // 上传图片
    let previewDom = document.getElementById("preview");
    $("#inputLogo").on("change", function () {
        let file = this.files[0];
        if (!file || !file.type.includes("image/")) return;

        let fileReader = new FileReader();
        fileReader.onload = e => {
            previewDom.src = e.target.result;
            updateReport({header: {hasLogo: true, imgLogo: e.target.result.split(",")[1]}});
            console.log(e.target.result);
        };
        fileReader.readAsDataURL(file);
    });
    // 清除图片
    $("#clearLogo").on("click", function () {
        previewDom.src = "";
        $("#inputLogo")[0].value = "";
        updateReport({header: {hasLogo: false, imgLogo: ""}});
    });

    /*  // 多行文本分割
      function splitText(text, delimiter) {
          let arr;
          if (delimiter !== undefined) {
              arr = text.split(delimiter);
          } else {
              arr = text.split("\n");
          }
          return arr;
      }*/

    // 显示文档
    function show() {
        let doc = new DocTool("container");
        if (data.hasHeader) {
            if (data.header.hasLogo) {
                doc.createImgInLineWithPath(data.header.imgLogo);
            }
            if (data.header.hasTitle) {
                doc.createTitle(data.header.title);
            }
            if (data.header.hasSubTitle) {
                doc.createSubTitle(data.header.subTitle);
            }
        }
        if (data.hasExperiment) {
            doc.createH1("Experiment");
            if (data.experiment.hasInformation) {
                doc.createH2("Information");
                doc.createText("Name :", data.experiment.information.name);
                doc.createText("barcode :", data.experiment.information.barcode);
                doc.createText("userName :", data.experiment.information.userName);
                doc.createText("instrumentName :", data.experiment.information.instrumentName);
                doc.createText("blockType :", data.experiment.information.blockType);
            }
            if (data.experiment.hasExperimentSetting) {
                doc.createH2("Experiment Setting");
                doc.createText("Experiment Type :", data.experiment.experimentSetting.experimentType);
                doc.createText("Chemistry :", data.experiment.experimentSetting.chemistry);
                doc.createText("Run Mode :", data.experiment.experimentSetting.runMode);
            }
            if (data.experiment.hasParameterSetting) {
                doc.createH2("Parameter Setting");
                doc.createText("Reaction Volume :", data.experiment.parameterSetting.reactionVolume);
                doc.createText("Lid Heating Switch :", data.experiment.parameterSetting.lidHeatingSwitch);
                doc.createText("Cover Temp :", data.experiment.parameterSetting.coverTemp);
                doc.createText("Lid Close Temp :", data.experiment.parameterSetting.lidCloseTemp);
            }
            if (data.experiment.hasComments) {
                doc.createH2("Comments");
            }
            if (data.experiment.hasLoadPreview) {
                doc.createH2("Load Preview");
                doc.createImgInLineWithBase64(data.experiment.imgLoadPreviewPlate);
                doc.createImgInLineWithBase64(data.experiment.imgLoadPreviewProtocol);
            }
        }
        if (data.hasPlate) {
            doc.createH1("Plate edit");
            if (data.plate.hasPlateLayout) {
                doc.createH2("Plate Edit");
                doc.createSplitTable(data.plate.plateLayout, "docPlateEditTable");
            }
            if (data.plate.hasTask) {
                doc.createH2("Task 信息");
                doc.splitText(data.plate.task);
                // for (let i = 0; i < arr.length; i++) {
                //     doc.createText(arr[i]);
                // }
            }
            if (data.plate.hasTarget) {
                doc.createH2("Target 信息");
                doc.createTable(data.plate.target, "docTargetTable");

            }
            if (data.plate.hasSplitPlate) {
                doc.createH2("Split Plate");
                doc.createText(data.plate.splitPlate);
            }
            if (data.plate.hasSample) {
                doc.createH2("Sample 信息");
                doc.createTable(data.plate.sample,"docSampleTable");
            }
            if (data.plate.hasStandard) {
                doc.createH2("Standard 信息");
                doc.createText("Select Target :", data.plate.standard.selectTarget);
                doc.createText("Standard Amount :", data.plate.standard.standardAmount);
                doc.createText("Standard Number :", data.plate.standard.standardNumber);
                doc.createText("Factor :", data.plate.standard.factor);
                doc.createText("Dilution Factor :", data.plate.standard.dilutionFactor);
                doc.createText("Unit  :", data.plate.standard.unit);
                doc.createText("Replicates  :", data.plate.standard.replicates);
                doc.createText("Increasing/Decreasing :", data.plate.standard.increasing_decreasing);
                doc.createText("Assignment  :", data.plate.standard.assignment);
            }
        }
        if (data.hasProtocol) {
            doc.createH1("Protocol Edit");
            if (data.protocol.hasProtocol) {
                doc.createH2("Protocol");
                doc.splitText(data.protocol.protocol);
                // for (let i = 0; i < arr.length; i++) {
                //     doc.createText(arr[i]);
                // }
            }
        }
        if (data.hasRun) {
            doc.createH1("Run 原始结果信息");
            if (data.run.hasRunTime) {
                doc.createH2("Run time");
                doc.splitText(data.run.runTime);
                // for (let i = 0; i < arr.length; i++) {
                //     doc.createText(arr[i]);
                // }
            }
            if (data.run.hasTemperatureCurve) {
                doc.createH2("Temperature curve");
                doc.createImgInLineWithBase64(data.run.imgTemperatureCurve);
            }
        }
        if (data.hasAnalysis) {
            doc.createH1("Analysis 信息");
            if (data.analysis.hasQuantification) {
                doc.createH2("Quantification");
                doc.createImgInLineWithBase64(data.analysis.imgAmplificationCurve_cq);
                doc.createText("Amplification curve-Cq");
                doc.createText("Amplification curve-Log");
                doc.createImgInLineWithBase64(data.analysis.imgAmplificationCurve_log);
            }
            if (data.analysis.hasStandardCurve) {
                doc.createH2("标准曲线");
                doc.createImgInLineWithBase64(data.analysis.imgStandardCurve);
            }
            if (data.analysis.hasQuantificationData) {
                doc.createH2("Quantification data");
                doc.createTable(data.analysis.quantificationData,"docQuantificationDataTable");
            }
            if (data.analysis.hasMelt) {
                doc.createH2("Melt curve");
                doc.createText("原始曲线");
                doc.createImgInLineWithBase64(data.analysis.imgMeltCurve);
                doc.createText("一阶导数图");
                doc.createImgInLineWithBase64(data.analysis.imgMeltPeak);
            }
            if (data.analysis.hasMeltData) {
                doc.createH2("Melt data")
                doc.createTable(data.analysis.meltData,"docMeltDataTable");
            }
            if (data.analysis.hasGeneExpression) {
                doc.createH2("Gene expression");
                doc.createText("Bar 图");
                doc.createImgInLineWithBase64(data.analysis.imgGeneExpressionBar);
                doc.createText("分析模型", data.analysis.geneExpressionMode);
                doc.createText("gene expression 数据");
                doc.createTable(data.analysis.geneExpressionData,"docGeneExpressionDataTable");

            }
        }
    }

    show();
// insertText();
// changeState();
// adjust();


    /*   function changeState() {
           // Header
           if (data.hasHeader && data.header.hasTitle) {
               document.getElementById("title").style.display = "block";
           } else {
               document.getElementById("title").style.display = "none";
           }

           if (data.hasHeader && data.header.hasSubTitle) {
               document.getElementById("subTitle").style.display = "block";
           } else {
               document.getElementById("subTitle").style.display = "none";
           }

           if (data.hasHeader && data.header.hasLogo) {
               document.getElementById("head").style.display = "block";
           } else {
               document.getElementById("head").style.display = "none";
           }

           // Experiment
           if (data.hasExperiment) {
               document.getElementById("experimentTitle").style.display = "block";
           } else {
               document.getElementById("experimentTitle").style.display = "none";
           }

           // Information
           if (data.hasExperiment && data.experiment.hasInformation) {
               document.getElementById("informationTitle").style.display = "block";
               document.getElementById("informationName").style.display = "block";
               document.getElementById("informationBarcode").style.display = "block";
               document.getElementById("informationUserName").style.display = "block";
               document.getElementById("informationInsName").style.display = "block";
               document.getElementById("informationBlockType").style.display = "block";
           } else {
               document.getElementById("informationTitle").style.display = "none";
               document.getElementById("informationName").style.display = "none";
               document.getElementById("informationBarcode").style.display = "none";
               document.getElementById("informationUserName").style.display = "none";
               document.getElementById("informationInsName").style.display = "none";
               document.getElementById("informationBlockType").style.display = "none";
           }

           // experimentSetting
           if (data.hasExperiment && data.experiment.hasExperimentSetting) {
               document.getElementById("experimentSettingTitle").style.display = "block";
               document.getElementById("experimentSettingExperimentType").style.display = "block";
               document.getElementById("experimentSettingChemistry").style.display = "block";
               document.getElementById("experimentSettingRunMode").style.display = "block";
           } else {
               document.getElementById("experimentSettingTitle").style.display = "none";
               document.getElementById("experimentSettingExperimentType").style.display = "none";
               document.getElementById("experimentSettingChemistry").style.display = "none";
               document.getElementById("experimentSettingRunMode").style.display = "none";
           }

           // Parameter Setting
           if (data.hasExperiment && data.experiment.hasParameterSetting) {
               document.getElementById("parameterSettingTitle").style.display = "block";
               document.getElementById("parameterSettingReactionVolume").style.display = "block";
               document.getElementById("parameterSettingLidHeatingSwitch").style.display = "block";
               document.getElementById("parameterSettingCoverTemp").style.display = "block";
               document.getElementById("parameterSettingLidCloseTemp").style.display = "block";
           } else {
               document.getElementById("parameterSettingTitle").style.display = "none";
               document.getElementById("parameterSettingReactionVolume").style.display = "none";
               document.getElementById("parameterSettingLidHeatingSwitch").style.display = "none";
               document.getElementById("parameterSettingCoverTemp").style.display = "none";
               document.getElementById("parameterSettingLidCloseTemp").style.display = "none";
           }

           // Comments
           if (data.hasExperiment && data.experiment.hasComments) {
               document.getElementById("commentsTitle").style.display = "block";
               document.getElementById("commentsIMG").style.display = "block";
           } else {
               document.getElementById("commentsTitle").style.display = "none";
               document.getElementById("commentsIMG").style.display = "none";
           }

           // Load Preview
           if (data.hasExperiment && data.experiment.hasLoadPreview) {
               document.getElementById("loadPreviewTitle").style.display = "block";
               document.getElementById("loadPreviewIMG").style.display = "block";
           } else {
               document.getElementById("loadPreviewTitle").style.display = "none";
               document.getElementById("loadPreviewIMG").style.display = "none";
           }

           // Plate
           if (data.hasPlate) {
               document.getElementById("plateEditTitleH1").style.display = "block";
           } else {
               document.getElementById("plateEditTitleH1").style.display = "none";
           }

           // Plate Edit
           if (data.hasPlate && data.plate.hasPlateLayout) {
               document.getElementById("plateEditTitleH2").style.display = "block";
               document.getElementById("plateEditTable").style.display = "block";
           } else {
               document.getElementById("plateEditTitleH2").style.display = "none";
               document.getElementById("plateEditTable").style.display = "none";
           }
           // Task 信息
           if (data.hasPlate && data.plate.hasTask) {
               document.getElementById("plateEditTaskTitle").style.display = "block";
               document.getElementById("plateEditTaskText").style.display = "block";
           } else {
               document.getElementById("plateEditTaskTitle").style.display = "none";
               document.getElementById("plateEditTaskText").style.display = "none";
           }

           // Target 信息
           if (data.hasPlate && data.plate.hasTarget) {
               document.getElementById("plateEditTargetTitle").style.display = "block";
               document.getElementById("plateEditTargetTable").style.display = "block";
           } else {
               document.getElementById("plateEditTargetTitle").style.display = "none";
               document.getElementById("plateEditTargetTable").style.display = "none";
           }

           // Split Plate
           if (data.hasPlate && data.plate.hasSplitPlate) {
               document.getElementById("plateEditSplitPlateTitle").style.display = "block";
               document.getElementById("plateEditSplitPlateText").style.display = "block";
           } else {
               document.getElementById("plateEditSplitPlateTitle").style.display = "none";
               document.getElementById("plateEditSplitPlateText").style.display = "none";
           }

           //Sample 信息
           if (data.hasPlate && data.plate.hasSample) {
               document.getElementById("plateEditSampleTitle").style.display = "block";
               document.getElementById("plateEditSampleTable").style.display = "block";
           } else {
               document.getElementById("plateEditSampleTitle").style.display = "none";
               document.getElementById("plateEditSampleTable").style.display = "none";
           }

           //Standard 信息
           if (data.hasPlate && data.plate.hasStandard) {
               document.getElementById("plateEditStandardTitle").style.display = "block";
               document.getElementById("plateEditStandardSelectTarget").style.display = "block";
               document.getElementById("plateEditStandardStandardAmount").style.display = "block";
               document.getElementById("plateEditStandardStandardNumber").style.display = "block";
               document.getElementById("plateEditStandardFactor").style.display = "block";
               document.getElementById("plateEditStandardDilutionFactor").style.display = "block";
               document.getElementById("plateEditStandardUnit").style.display = "block";
               document.getElementById("plateEditStandardReplicates").style.display = "block";
               document.getElementById("plateEditStandardIncreasingDecreasing").style.display = "block";
               document.getElementById("plateEditStandardAssignment").style.display = "block";
           } else {
               document.getElementById("plateEditStandardTitle").style.display = "none";
               document.getElementById("plateEditStandardSelectTarget").style.display = "none";
               document.getElementById("plateEditStandardStandardAmount").style.display = "none";
               document.getElementById("plateEditStandardStandardNumber").style.display = "none";
               document.getElementById("plateEditStandardFactor").style.display = "none";
               document.getElementById("plateEditStandardDilutionFactor").style.display = "none";
               document.getElementById("plateEditStandardUnit").style.display = "none";
               document.getElementById("plateEditStandardReplicates").style.display = "none";
               document.getElementById("plateEditStandardIncreasingDecreasing").style.display = "none";
               document.getElementById("plateEditStandardAssignment").style.display = "none";
           }

           // Protocol
           if (data.hasProtocol) {
               document.getElementById("protocolEditTitle").style.display = "block";
           } else {
               document.getElementById("protocolEditTitle").style.display = "none";
           }

           if (data.hasProtocol && data.protocol.hasProtocol) {
               document.getElementById("protocolTitle").style.display = "block";
               document.getElementById("protocolText").style.display = "block";
           } else {
               document.getElementById("protocolTitle").style.display = "none";
               document.getElementById("protocolText").style.display = "none";
           }

           // Run
           if (data.hasRun) {
               document.getElementById("runTitle").style.display = "block";
           } else {
               document.getElementById("runTitle").style.display = "none";
           }

           if (data.hasRun && data.run.hasRunTime) {
               document.getElementById("runTime").style.display = "block";
               document.getElementById("runTimeText").style.display = "block";
           } else {
               document.getElementById("runTime").style.display = "none";
               document.getElementById("runTimeText").style.display = "none";
           }

           if (data.hasRun && data.run.hasTemperatureCurve) {
               document.getElementById("runTemperatureCurveTitle").style.display = "block";
               document.getElementById("runTemperatureCurveIMG").style.display = "block";
           } else {
               document.getElementById("runTemperatureCurveTitle").style.display = "none";
               document.getElementById("runTemperatureCurveIMG").style.display = "none";
           }

           // Quantification
           if (data.hasAnalysis) {
               document.getElementById("analysisTitle").style.display = "block";
           } else {
               document.getElementById("analysisTitle").style.display = "none";
           }

           if (data.hasAnalysis && data.analysis.hasQuantification) {
               document.getElementById("analysisQuantification").style.display = "block";
               document.getElementById("analysisAmplificationCurve-Cq").style.display = "block";
               document.getElementById("analysisAmplificationCurve-CqIMG").style.display = "block";
               document.getElementById("analysisAmplificationCurve-Clog").style.display = "block";
               document.getElementById("analysisAmplificationCurve-ClogIMG").style.display = "block";
           } else {
               document.getElementById("analysisQuantification").style.display = "none";
               document.getElementById("analysisAmplificationCurve-Cq").style.display = "none";
               document.getElementById("analysisAmplificationCurve-CqIMG").style.display = "none";
               document.getElementById("analysisAmplificationCurve-Clog").style.display = "none";
               document.getElementById("analysisAmplificationCurve-ClogIMG").style.display = "none";
           }

           // 标准曲线
           if (data.hasAnalysis && data.analysis.hasStandardCurve) {
               document.getElementById("analysisStandardCurveTitle").style.display = "block";
               document.getElementById("analysisStandardCurveIMG").style.display = "block";
           } else {
               document.getElementById("analysisStandardCurveTitle").style.display = "none";
               document.getElementById("analysisStandardCurveIMG").style.display = "none";
           }

           if (data.hasAnalysis && data.analysis.hasQuantificationData) {
               document.getElementById("analysisQuantificationDataTitle").style.display = "block";
               document.getElementById("analysisQuantificationDataTable").style.display = "block";
           } else {
               document.getElementById("analysisQuantificationDataTitle").style.display = "none";
               document.getElementById("analysisQuantificationDataTable").style.display = "none";
           }

           if (data.hasAnalysis && data.analysis.hasMelt) {
               document.getElementById("analysisMeltCurve").style.display = "block";
               document.getElementById("analysisPreCurve").style.display = "block";
               document.getElementById("analysisPreCurveIMG").style.display = "block";
               document.getElementById("analysisMeltPeak").style.display = "block";
               document.getElementById("analysisMeltPeakIMG").style.display = "block";
           } else {
               document.getElementById("analysisMeltCurve").style.display = "none";
               document.getElementById("analysisPreCurve").style.display = "none";
               document.getElementById("analysisPreCurveIMG").style.display = "none";
               document.getElementById("analysisMeltPeak").style.display = "none";
               document.getElementById("analysisMeltPeakIMG").style.display = "none";
           }

           if (data.hasAnalysis && data.analysis.hasMeltData) {
               document.getElementById("analysisMeltDataTitle").style.display = "block";
               document.getElementById("analysisMeltDataTable").style.display = "block";
           } else {
               document.getElementById("analysisMeltDataTitle").style.display = "none";
               document.getElementById("analysisMeltDataTable").style.display = "none";
           }

           if (document.getElementById("chk_analysis").checked && document.getElementById("chk_geneExpression").checked) {
               document.getElementById("analysisGeneExpressionTitle").style.display = "block";
               document.getElementById("analysisGeneExpressionBar").style.display = "block";
               document.getElementById("analysisGeneExpressionBarIMG").style.display = "block";
               document.getElementById("analysisGeneExpressionMode").style.display = "block";
               document.getElementById("analysisGeneExpressionData").style.display = "block";
               document.getElementById("analysisGeneExpressionDataTable").style.display = "block";
           } else {
               document.getElementById("analysisGeneExpressionTitle").style.display = "none";
               document.getElementById("analysisGeneExpressionBar").style.display = "none";
               document.getElementById("analysisGeneExpressionBarIMG").style.display = "none";
               document.getElementById("analysisGeneExpressionMode").style.display = "none";
               document.getElementById("analysisGeneExpressionData").style.display = "none";
               document.getElementById("analysisGeneExpressionDataTable").style.display = "none";
           }
       }*/

    /*
        function insertText() {
            let preBase = "data:image/png;base64,";
            // Header
            document.getElementById("title").innerText = data.header.title;
            document.getElementById("subTitle").innerText = data.header.subTitle;
            document.getElementById("head").src = data.header.imgLogo;

            // Experiment
            // Information
            document.getElementById("docInformationName").innerText = data.experiment.information.name;
            document.getElementById("docInformationBarcode").innerText = data.experiment.information.barcode;
            document.getElementById("docInformationUserName").innerText = data.experiment.information.userName;
            document.getElementById("docInformationInsName").innerText = data.experiment.information.instrumentName;
            document.getElementById("docInformationBlockType").innerText = data.experiment.information.blockType;
            // ExperimentSetting
            document.getElementById("docExperimentSettingExperimentType").innerText = data.experiment.experimentSetting.experimentType;
            document.getElementById("docExperimentSettingChemistry").innerText = data.experiment.experimentSetting.chemistry;
            document.getElementById("docExperimentSettingRunMode").innerText = data.experiment.experimentSetting.runMode;
            // ParameterSetting
            document.getElementById("docParameterSettingReactionVolume").innerText = data.experiment.parameterSetting.reactionVolume;
            document.getElementById("docParameterSettingLidHeatingSwitch").innerText = data.experiment.parameterSetting.lidHeatingSwitch;
            document.getElementById("docParameterSettingCoverTemp").innerText = data.experiment.parameterSetting.coverTemp;
            document.getElementById("docParameterSettingLidCloseTemp").innerText = data.experiment.parameterSetting.lidCloseTemp;
            // Comments
            document.getElementById("commentsIMG").src = preBase + data.experiment.imgLoadPreviewPlate;
            // LoadPreview
            document.getElementById("loadPreviewIMG").src = preBase + data.experiment.imgLoadPreviewProtocol;

            // Plate edit
            // Plate Edit
            // 创建内容
            for (let i = 0; i < data.plate.plateLayout.length; i++) {
                //创建行tr
                let tr = document.createElement('tr');
                //将新创建的行tr添加给table
                $('#plateEditTable').append(tr);
                for (let k in data.plate.plateLayout[i]) {
                    // 创建th元素
                    let th = document.createElement('th');
                    // 将每个对象中的属性值传给td
                    th.innerText = data.plate.plateLayout[i][k];
                    //给tr添加th子元素
                    tr.appendChild(th);
                }
            }

            // Task
            document.getElementById("plateEditTaskText").innerHTML = data.plate.task.replace(/\n/g, "<br>");

            // Target
            // 创建标题
            let targetHead_tr = document.createElement('tr');
            $("#plateEditTargetTable").append(targetHead_tr);
            for (let k in data.plate.target[0]) {
                // 创建th元素
                let th = document.createElement('th');
                // 将每个对象中的属性值传给th
                th.innerText = data.plate.target[0][k];
                //给tr添加th子元素
                targetHead_tr.appendChild(th);
            }
            // 创建内容
            for (let i = 1; i < data.plate.target.length; i++) {
                //创建行tr
                let tr = document.createElement('tr');
                //将新创建的行tr添加给tbody
                $('#plateEditTargetTable').append(tr);
                // 3、内层for循环，创建每一行中的所有单元格td，单元格td的数量与对象中的属性多少有关，故用for...in...
                for (let k in data.plate.target[i]) {
                    // 创建td元素
                    let td = document.createElement('td');
                    // 将每个对象中的属性值传给td
                    td.innerText = data.plate.target[i][k];
                    //给tr添加td子元素
                    tr.appendChild(td);
                }
            }

            // Split Plate
            document.getElementById("plateEditSplitPlateText").innerText = data.plate.splitPlate;

            // Sample
            let sampleHead_tr = document.createElement('tr');
            $('#plateEditSampleTable').append(sampleHead_tr);
            for (let k in data.plate.sample[0]) {
                let th = document.createElement('th');
                th.innerText = data.plate.sample[0][k];
                sampleHead_tr.appendChild(th);
            }
            for (let i = 1; i < data.plate.sample.length; i++) {
                let tr = document.createElement('tr');
                $('#plateEditSampleTable').append(tr);
                for (let k in data.plate.sample[i]) {
                    let td = document.createElement('td');
                    td.innerText = data.plate.sample[i][k];
                    tr.appendChild(td);
                }
            }

            // Standard
            document.getElementById("docPlateEditStandardSelectTarget").innerText = data.plate.standard.selectTarget;
            document.getElementById("docPlateEditStandardStandardAmount").innerText = data.plate.standard.standardAmount;
            document.getElementById("docPlateEditStandardStandardNumber").innerText = data.plate.standard.standardNumber;
            document.getElementById("docPlateEditStandardFactor").innerText = data.plate.standard.factor;
            document.getElementById("docPlateEditStandardDilutionFactor").innerText = data.plate.standard.dilutionFactor;
            document.getElementById("standard_Unit").innerText = data.plate.standard.unit;
            document.getElementById("docPlateEditStandardReplicates").innerText = data.plate.standard.replicates;
            document.getElementById("docPlateEditStandardIncreasingDecreasing").innerText = data.plate.standard.increasing_decreasing;
            document.getElementById("docPlateEditStandardAssignment").innerText = data.plate.standard.assignment;

            // Protocol Edit
            // Protocol
            document.getElementById("protocolText").innerHTML = data.protocol.protocol.replace(/\n/g, "<br>");

            // Run
            // Run Time
            document.getElementById("runTimeText").innerHTML = data.run.runTime.replace(/\n/g, "<br>");
            document.getElementById("runTemperatureCurveIMG").src = preBase + data.run.imgTemperatureCurve;

            // Analysis
            // Quantification
            document.getElementById("analysisAmplificationCurve-CqIMG").src = preBase + data.analysis.imgAmplificationCurve_cq;
            document.getElementById("analysisAmplificationCurve-ClogIMG").src = preBase + data.analysis.imgAmplificationCurve_log;

            // 标准曲线
            document.getElementById("analysisStandardCurveIMG").src = preBase + data.analysis.imgStandardCurve;

            // Quantification Data
            let QD_tr = document.createElement('tr');
            $('#analysisQuantificationDataTable').append(QD_tr);
            for (let k in data.analysis.quantificationData[0]) {
                let th = document.createElement('th');
                th.innerText = data.analysis.quantificationData[0][k];
                QD_tr.appendChild(th);
            }
            for (let i = 1; i < data.analysis.quantificationData.length; i++) {
                let tr = document.createElement('tr');
                $('#analysisQuantificationDataTable').append(tr);
                for (let k in data.analysis.quantificationData[i]) {
                    let td = document.createElement('td');
                    td.innerText = data.analysis.quantificationData[i][k];
                    tr.appendChild(td);
                }
            }

            // Melt Curve
            document.getElementById("analysisPreCurveIMG").src = preBase + data.analysis.imgMeltCurve;
            document.getElementById("analysisMeltPeakIMG").src = preBase + data.analysis.imgMeltPeak;

            // Melt Data
            let MT_tr = document.createElement('tr');
            $('#analysisMeltDataTable').append(MT_tr);
            for (let k in data.analysis.meltData[0]) {
                let th = document.createElement('th');
                th.innerText = data.analysis.meltData[0][k];
                MT_tr.appendChild(th);
            }
            for (let i = 1; i < data.analysis.meltData.length; i++) {
                let tr = document.createElement('tr');
                $('#analysisMeltDataTable').append(tr);
                for (let k in data.analysis.meltData[i]) {
                    let td = document.createElement('td');
                    td.innerText = data.analysis.meltData[i][k];
                    tr.appendChild(td);
                }
            }

            // Gene expression
            document.getElementById("analysisGeneExpressionBarIMG").src = preBase + data.analysis.imgGeneExpressionBar;
            document.getElementById("geneExpressionMode").innerText = data.analysis.geneExpressionMode;
            let GE_tr = document.createElement('tr');
            $('#analysisGeneExpressionDataTable').append(GE_tr);
            for (let k in data.analysis.geneExpressionData[0]) {
                let th = document.createElement('th');
                th.innerText = data.analysis.geneExpressionData[0][k];
                GE_tr.appendChild(th);
            }
            for (let i = 1; i < data.analysis.geneExpressionData.length; i++) {
                let tr = document.createElement('tr');
                $('#analysisGeneExpressionDataTable').append(tr);
                for (let k in data.analysis.geneExpressionData[i]) {
                    let td = document.createElement('td');
                    td.innerText = data.analysis.geneExpressionData[i][k];
                    tr.appendChild(td);
                }
            }
        }
    */

    /*function adjust() {
        let h = 0, margin = 30, pageHeight = 928, htmlList = [""];
        $("#container > article > p, #container > article > img, #container > article > table, #container > article > div").each(function () {
                let $this = $(this);
                let outerHTML = this.outerHTML; // 当前元素的 html 字符串
                if (this.style.display === "none") {
                    htmlList[htmlList.length - 1] += outerHTML; // 如果隐藏直接塞进去
                } else {
                    if (this.tagName.toLowerCase() === "table") { // 如果是 table 标签
                        let tablePre = this.outerHTML.split(">")[0];// 获取table的ID
                        $this.find("tr").each(function () { // 对每个 tr 遍历
                            let $this = $(this);
                            let outerHTML = this.outerHTML;
                            let height = $this.outerHeight();   // tr 高度
                            if (h + height > pageHeight) {  // 超出一页
                                if ($this.index() !== 0) htmlList[htmlList.length - 1] += "</table>";// 如果不是第一个 tr，则给上一个封底
                                htmlList[htmlList.length] = tablePre + ">" + outerHTML; // 起新的一页，封顶，不写 thead 和 tbody，让浏览器自行处理
                                h = height;  // 重置高度
                            } else {    // 没超出一页
                                h += height;    // 对计算高度累加
                                if ($this.index() === 0) htmlList[htmlList.length - 1] += tablePre + ">";// 如果是第一个 tr，则先封顶
                                htmlList[htmlList.length - 1] += outerHTML; // 将 tr 塞进去
                            }
                        });
                        htmlList[htmlList.length - 1] += "</table>"; // 封底
                    } else {    // 非 table 标签
                        let height = $this.outerHeight() + margin;  // 计算高度，height + padding + margin
                        if (h + height > pageHeight) {  // 超出一页
                            htmlList[htmlList.length] = outerHTML;  // 起新的一页，直接塞进去
                            h = height; // 重置高度
                        } else {    // 未超出一页
                            h += height;    // 对计算高度累加
                            htmlList[htmlList.length - 1] += outerHTML; // 直接塞进去
                        }
                    }
                }
            }
        );
        $("#container").html(htmlList.map(html => `<article>${html}</article>`).join(""));
    }

*/
});


